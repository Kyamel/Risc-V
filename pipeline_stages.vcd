$date
	Thu Jul 31 13:33:23 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_pipeline_stages $end
$var wire 5 ! rs2_addr [4:0] $end
$var wire 5 " rs1_addr [4:0] $end
$var wire 1 # imem_read $end
$var wire 32 $ imem_addr [31:0] $end
$var wire 1 % if_id_valid $end
$var wire 32 & if_id_pc [31:0] $end
$var wire 32 ' if_id_instruction [31:0] $end
$var wire 1 ( id_ex_valid $end
$var wire 32 ) id_ex_rs2_data [31:0] $end
$var wire 5 * id_ex_rs2_addr [4:0] $end
$var wire 32 + id_ex_rs1_data [31:0] $end
$var wire 5 , id_ex_rs1_addr [4:0] $end
$var wire 5 - id_ex_rd_addr [4:0] $end
$var wire 32 . id_ex_pc [31:0] $end
$var wire 32 / id_ex_instruction [31:0] $end
$var wire 32 0 id_ex_immediate [31:0] $end
$var wire 20 1 id_ex_control_signals [19:0] $end
$var wire 1 2 ex_mem_valid $end
$var wire 32 3 ex_mem_rs2_data [31:0] $end
$var wire 5 4 ex_mem_rd_addr [4:0] $end
$var wire 32 5 ex_mem_pc [31:0] $end
$var wire 20 6 ex_mem_control_signals [19:0] $end
$var wire 32 7 ex_mem_alu_result_fwd [31:0] $end
$var wire 32 8 ex_mem_alu_result [31:0] $end
$var wire 32 9 branch_target [31:0] $end
$var wire 1 : branch_taken $end
$var reg 1 ; clk $end
$var reg 32 < expected_result [31:0] $end
$var reg 1 = flush $end
$var reg 2 > forward_a [1:0] $end
$var reg 2 ? forward_b [1:0] $end
$var reg 32 @ imem_data [31:0] $end
$var reg 32 A mem_wb_alu_result [31:0] $end
$var reg 32 B mem_wb_mem_data [31:0] $end
$var reg 5 C mem_wb_rd_addr [4:0] $end
$var reg 32 D mem_wb_rd_data [31:0] $end
$var reg 1 E mem_wb_reg_write $end
$var reg 32 F new_pc [31:0] $end
$var reg 1 G pc_src $end
$var reg 1 H reset $end
$var reg 32 I rs1_data [31:0] $end
$var reg 32 J rs2_data [31:0] $end
$var reg 1 K stall $end
$var integer 32 L cycle_count [31:0] $end
$scope module ex_stage_inst $end
$var wire 32 M alu_input_a [31:0] $end
$var wire 1 : branch_taken $end
$var wire 1 ; clk $end
$var wire 32 N ex_mem_alu_result_fwd [31:0] $end
$var wire 2 O forward_a [1:0] $end
$var wire 2 P forward_b [1:0] $end
$var wire 32 Q mem_wb_alu_result [31:0] $end
$var wire 32 R mem_wb_mem_data [31:0] $end
$var wire 1 H reset $end
$var wire 1 S reg_write $end
$var wire 32 T pc_plus4 [31:0] $end
$var wire 1 U mem_write $end
$var wire 1 V mem_to_reg $end
$var wire 1 W mem_read $end
$var wire 1 X jump $end
$var wire 1 ( id_ex_valid $end
$var wire 32 Y id_ex_rs2_data [31:0] $end
$var wire 5 Z id_ex_rs2_addr [4:0] $end
$var wire 32 [ id_ex_rs1_data [31:0] $end
$var wire 5 \ id_ex_rs1_addr [4:0] $end
$var wire 5 ] id_ex_rd_addr [4:0] $end
$var wire 32 ^ id_ex_pc [31:0] $end
$var wire 32 _ id_ex_instruction [31:0] $end
$var wire 32 ` id_ex_immediate [31:0] $end
$var wire 20 a id_ex_control_signals [19:0] $end
$var wire 3 b branch_type [2:0] $end
$var wire 32 c branch_target [31:0] $end
$var wire 1 d branch $end
$var wire 1 e alu_zero $end
$var wire 1 f alu_src $end
$var wire 32 g alu_result [31:0] $end
$var wire 4 h alu_op [3:0] $end
$var wire 32 i alu_input_b [31:0] $end
$var reg 1 j branch_condition_met $end
$var reg 32 k ex_mem_alu_result [31:0] $end
$var reg 20 l ex_mem_control_signals [19:0] $end
$var reg 32 m ex_mem_pc [31:0] $end
$var reg 5 n ex_mem_rd_addr [4:0] $end
$var reg 32 o ex_mem_rs2_data [31:0] $end
$var reg 1 2 ex_mem_valid $end
$var reg 32 p forwarded_rs1 [31:0] $end
$var reg 32 q forwarded_rs2 [31:0] $end
$scope module alu_unit $end
$var wire 32 r a [31:0] $end
$var wire 4 s alu_control [3:0] $end
$var wire 32 t b [31:0] $end
$var wire 1 e zero $end
$var parameter 4 u ALU_ADD $end
$var parameter 4 v ALU_AND $end
$var parameter 4 w ALU_LUI $end
$var parameter 4 x ALU_OR $end
$var parameter 4 y ALU_SLL $end
$var parameter 4 z ALU_SLT $end
$var parameter 4 { ALU_SLTU $end
$var parameter 4 | ALU_SRA $end
$var parameter 4 } ALU_SRL $end
$var parameter 4 ~ ALU_SUB $end
$var parameter 4 !" ALU_XOR $end
$var reg 32 "" result [31:0] $end
$upscope $end
$upscope $end
$scope module id_stage_inst $end
$var wire 1 ; clk $end
$var wire 1 = flush $end
$var wire 5 #" mem_wb_rd_addr [4:0] $end
$var wire 32 $" mem_wb_rd_data [31:0] $end
$var wire 1 E mem_wb_reg_write $end
$var wire 1 H reset $end
$var wire 5 %" rs1_addr [4:0] $end
$var wire 32 &" rs1_data [31:0] $end
$var wire 5 '" rs2_addr [4:0] $end
$var wire 32 (" rs2_data [31:0] $end
$var wire 1 K stall $end
$var wire 32 )" rs2_data_bypassed [31:0] $end
$var wire 5 *" rs2_addr_full [4:0] $end
$var wire 32 +" rs1_data_bypassed [31:0] $end
$var wire 5 ," rs1_addr_full [4:0] $end
$var wire 5 -" rd_addr_full [4:0] $end
$var wire 32 ." immediate [31:0] $end
$var wire 1 % if_id_valid $end
$var wire 32 /" if_id_pc [31:0] $end
$var wire 32 0" if_id_instruction [31:0] $end
$var wire 20 1" control_signals [19:0] $end
$var reg 20 2" id_ex_control_signals [19:0] $end
$var reg 32 3" id_ex_immediate [31:0] $end
$var reg 32 4" id_ex_instruction [31:0] $end
$var reg 32 5" id_ex_pc [31:0] $end
$var reg 5 6" id_ex_rd_addr [4:0] $end
$var reg 5 7" id_ex_rs1_addr [4:0] $end
$var reg 32 8" id_ex_rs1_data [31:0] $end
$var reg 5 9" id_ex_rs2_addr [4:0] $end
$var reg 32 :" id_ex_rs2_data [31:0] $end
$var reg 1 ( id_ex_valid $end
$scope module ctrl_unit $end
$var wire 7 ;" opcode [6:0] $end
$var wire 32 <" instruction [31:0] $end
$var wire 7 =" funct7 [6:0] $end
$var wire 3 >" funct3 [2:0] $end
$var reg 4 ?" alu_op [3:0] $end
$var reg 1 @" alu_src $end
$var reg 1 A" branch $end
$var reg 20 B" control_signals [19:0] $end
$var reg 3 C" imm_type [2:0] $end
$var reg 1 D" jump $end
$var reg 1 E" mem_read $end
$var reg 1 F" mem_to_reg $end
$var reg 1 G" mem_write $end
$var reg 2 H" pc_src [1:0] $end
$var reg 1 I" reg_write $end
$upscope $end
$scope module imm_gen $end
$var wire 7 J" opcode [6:0] $end
$var wire 32 K" instr [31:0] $end
$var reg 32 L" imm_out [31:0] $end
$upscope $end
$upscope $end
$scope module if_stage_inst $end
$var wire 1 ; clk $end
$var wire 1 = flush $end
$var wire 32 M" imem_addr [31:0] $end
$var wire 32 N" imem_data [31:0] $end
$var wire 32 O" new_pc [31:0] $end
$var wire 1 G pc_src $end
$var wire 1 H reset $end
$var wire 1 K stall $end
$var wire 32 P" pc_current [31:0] $end
$var wire 1 # imem_read $end
$var reg 32 Q" if_id_instruction [31:0] $end
$var reg 32 R" if_id_pc [31:0] $end
$var reg 1 % if_id_valid $end
$scope module pc_gen $end
$var wire 1 ; clk $end
$var wire 1 G flush $end
$var wire 32 S" new_pc [31:0] $end
$var wire 1 H reset $end
$var wire 1 K stall $end
$var reg 32 T" pc_out [31:0] $end
$upscope $end
$upscope $end
$scope task check_ex_stage_add $end
$upscope $end
$scope task check_ex_stage_addi $end
$upscope $end
$scope task check_ex_stage_load $end
$upscope $end
$scope task check_id_stage_add $end
$upscope $end
$scope task check_id_stage_addi $end
$upscope $end
$scope task check_id_stage_load $end
$upscope $end
$scope task check_if_stage $end
$var reg 32 U" expected_instr [31:0] $end
$var reg 32 V" expected_pc [31:0] $end
$upscope $end
$scope task test_add_instruction $end
$upscope $end
$scope task test_addi_instruction $end
$upscope $end
$scope task test_load_instruction $end
$upscope $end
$scope task wait_cycles $end
$var integer 32 W" cycles [31:0] $end
$var integer 32 X" i [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100 !"
b1 ~
b110 }
b111 |
b1001 {
b1000 z
b101 y
b11 x
b1010 w
b10 v
b0 u
$end
#0
$dumpvars
bx X"
bx W"
bx V"
bx U"
b0 T"
b0 S"
b0 R"
b10011 Q"
b0 P"
b0 O"
b10011 N"
b0 M"
b0 L"
b10011 K"
b10011 J"
1I"
b0 H"
0G"
0F"
0E"
0D"
b0 C"
b1000001 B"
0A"
1@"
b0 ?"
b0 >"
b0 ="
b10011 <"
b10011 ;"
b0 :"
b0 9"
b0 8"
b0 7"
b0 6"
b0 5"
b10011 4"
b0 3"
b0 2"
b1000001 1"
b10011 0"
b0 /"
b0 ."
b0 -"
b0 ,"
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
b0 $"
b0 #"
b0 ""
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
0j
b0 i
b0 h
b0 g
0f
1e
0d
b0 c
b0 b
b0 a
b0 `
b10011 _
b0 ^
b0 ]
b0 \
b0 [
b0 Z
b0 Y
0X
0W
0V
0U
b100 T
0S
b0 R
b0 Q
b0 P
b0 O
b0 N
b0 M
b0 L
0K
b0 J
b0 I
1H
0G
b0 F
0E
b0 D
b0 C
b0 B
b0 A
b10011 @
b0 ?
b0 >
0=
bx <
0;
0:
b0 9
b0 8
b0 7
b0 6
b0 5
b0 4
b0 3
02
b0 1
b0 0
b10011 /
b0 .
b0 -
b0 ,
b0 +
b0 *
b0 )
0(
b10011 '
b0 &
0%
b0 $
1#
b0 "
b0 !
$end
#5000
1;
#10000
0;
0H
#15000
1f
1S
b100 $
b100 M"
b100 P"
b100 T"
1%
b1000001 1
b1000001 a
b1000001 2"
1;
#20000
b1010 )"
b10101 +"
0;
b1000001000000110110011 @
b1000001000000110110011 N"
b11111 <
b1010 J
b1010 ("
b10101 I
b10101 &"
#25000
0e
b10101 7
b10101 N
b10101 g
b10101 ""
b1 1"
b1 B"
0@"
1I"
b1010 q
b10101 M
b10101 r
b10101 p
b110011 J"
b110011 ;"
b11 -"
b10 !
b10 '"
b10 *"
b1 "
b1 %"
b1 ,"
b0 ."
b0 L"
b1000001 6
b1000001 l
1(
b1010 )
b1010 Y
b1010 :"
b10101 +
b10101 [
b10101 8"
b1000001000000110110011 '
b1000001000000110110011 0"
b1000001000000110110011 <"
b1000001000000110110011 K"
b1000001000000110110011 Q"
b100 &
b100 /"
b100 R"
b1000 $
b1000 M"
b1000 P"
b1000 T"
1;
#30000
0;
b0 X"
b1 W"
#35000
b11111 7
b11111 N
b11111 g
b11111 ""
b1010 i
b1010 t
0f
b1100 $
b1100 M"
b1100 P"
b1100 T"
b1000 &
b1000 /"
b1000 R"
b1 1
b1 a
b1 2"
b10 *
b10 Z
b10 9"
b1 ,
b1 \
b1 7"
b11 -
b11 ]
b11 6"
b1000001000000110110011 /
b1000001000000110110011 _
b1000001000000110110011 4"
b100 9
b100 c
b1000 T
b100 .
b100 ^
b100 5"
12
b1010 3
b1010 o
b10101 8
b10101 k
b1000001000000110110011 U"
b0 V"
b0 X"
b1 L
1;
#40000
0;
#45000
b1 6
b1 l
b11 4
b11 n
b11111 8
b11111 k
b100 5
b100 m
b1000 9
b1000 c
b1100 T
b1000 .
b1000 ^
b1000 5"
b1100 &
b1100 /"
b1100 R"
b10000 $
b10000 M"
b10000 P"
b10000 T"
b0 X"
b10 L
1;
#50000
0;
#55000
b1100100 ."
b1100100 L"
b1000001 1"
b1000001 B"
1@"
1I"
b10011 J"
b11 ="
b10011 ;"
b100 -"
b100 !
b100 '"
b100 *"
b10100 $
b10100 M"
b10100 P"
b10100 T"
b110010000001000001000010011 '
b110010000001000001000010011 0"
b110010000001000001000010011 <"
b110010000001000001000010011 K"
b110010000001000001000010011 Q"
b10000 &
b10000 /"
b10000 R"
b1100 9
b1100 c
b10000 T
b1100 .
b1100 ^
b1100 5"
b1000 5
b1000 m
b10100 +"
b110010000001000001000010011 @
b110010000001000001000010011 N"
b1111000 <
b10100 I
b10100 &"
b1 X"
b11 L
1;
#60000
0;
#65000
b1100100 i
b1100100 t
b1111000 7
b1111000 N
b1111000 g
b1111000 ""
1f
b10100 M
b10100 r
b10100 p
b1100 5
b1100 m
b1000001 1
b1000001 a
b1000001 2"
b100 *
b100 Z
b100 9"
b100 -
b100 ]
b100 6"
b1100100 0
b1100100 `
b1100100 3"
b10100 +
b10100 [
b10100 8"
b110010000001000001000010011 /
b110010000001000001000010011 _
b110010000001000001000010011 4"
b1110100 9
b1110100 c
b10100 T
b10000 .
b10000 ^
b10000 5"
b10100 &
b10100 /"
b10100 R"
b11000 $
b11000 M"
b11000 P"
b11000 T"
b110010000001000001000010011 U"
b100 V"
b100 L
1;
b0 X"
#70000
0;
#75000
b11100 $
b11100 M"
b11100 P"
b11100 T"
b11000 &
b11000 /"
b11000 R"
b1111000 9
b1111000 c
b11000 T
b10100 .
b10100 ^
b10100 5"
b1000001 6
b1000001 l
b100 4
b100 n
b1111000 8
b1111000 k
b10000 5
b10000 m
b0 X"
b101 L
1;
#80000
0;
#85000
b1000111 1"
b1000111 B"
1E"
1F"
1@"
1I"
b11 J"
b0 ="
b10 >"
b11 ;"
b101 -"
b1000 !
b1000 '"
b1000 *"
b1000 ."
b1000 L"
b10100 5
b10100 m
b1111100 9
b1111100 c
b11100 T
b11000 .
b11000 ^
b11000 5"
b100000001010001010000011 '
b100000001010001010000011 0"
b100000001010001010000011 <"
b100000001010001010000011 K"
b100000001010001010000011 Q"
b11100 &
b11100 /"
b11100 R"
b100000 $
b100000 M"
b100000 P"
b100000 T"
b1000000000000 +"
b100000001010001010000011 @
b100000001010001010000011 N"
b1000000001000 <
b1000000000000 I
b1000000000000 &"
b1 X"
b110 L
1;
#90000
0;
#95000
b1000000001000 7
b1000000001000 N
b1000000001000 g
b1000000001000 ""
1W
1V
b1000 i
b1000 t
b1000000000000 M
b1000000000000 r
b1000000000000 p
b10 b
b100100 $
b100100 M"
b100100 P"
b100100 T"
b100000 &
b100000 /"
b100000 R"
b1000111 1
b1000111 a
b1000111 2"
b1000 *
b1000 Z
b1000 9"
b101 -
b101 ]
b101 6"
b1000 0
b1000 `
b1000 3"
b1000000000000 +
b1000000000000 [
b1000000000000 8"
b100000001010001010000011 /
b100000001010001010000011 _
b100000001010001010000011 4"
b100100 9
b100100 c
b100000 T
b11100 .
b11100 ^
b11100 5"
b11000 5
b11000 m
b100000001010001010000011 U"
b1000 V"
b111 L
1;
b0 X"
#100000
0;
#105000
b1000111 6
b1000111 l
b101 4
b101 n
b1000000001000 8
b1000000001000 k
b11100 5
b11100 m
b101000 9
b101000 c
b100100 T
b100000 .
b100000 ^
b100000 5"
b100100 &
b100100 /"
b100100 R"
b101000 $
b101000 M"
b101000 P"
b101000 T"
b0 X"
b1000 L
1;
#110000
0;
#115000
b101100 $
b101100 M"
b101100 P"
b101100 T"
b101000 &
b101000 /"
b101000 R"
b101100 9
b101100 c
b101000 T
b100100 .
b100100 ^
b100100 5"
b100000 5
b100000 m
b1 X"
b1001 L
1;
#120000
0;
#125000
b100100 5
b100100 m
b110000 9
b110000 c
b101100 T
b101000 .
b101000 ^
b101000 5"
b101100 &
b101100 /"
b101100 R"
b110000 $
b110000 M"
b110000 P"
b110000 T"
1;
#130000
0;
#135000
b110100 $
b110100 M"
b110100 P"
b110100 T"
b110000 &
b110000 /"
b110000 R"
b110100 9
b110100 c
b110000 T
b101100 .
b101100 ^
b101100 5"
b101000 5
b101000 m
1;
#140000
0;
#145000
b101100 5
b101100 m
b111000 9
b111000 c
b110100 T
b110000 .
b110000 ^
b110000 5"
b110100 &
b110100 /"
b110100 R"
b111000 $
b111000 M"
b111000 P"
b111000 T"
1;
#150000
0;
#155000
b111100 $
b111100 M"
b111100 P"
b111100 T"
b111000 &
b111000 /"
b111000 R"
b111100 9
b111100 c
b111000 T
b110100 .
b110100 ^
b110100 5"
b110000 5
b110000 m
1;
#160000
0;
#165000
b110100 5
b110100 m
b1000000 9
b1000000 c
b111100 T
b111000 .
b111000 ^
b111000 5"
b111100 &
b111100 /"
b111100 R"
b1000000 $
b1000000 M"
b1000000 P"
b1000000 T"
1;
